<?xml version="1.0" encoding="UTF-8"?>

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <!-- Don't fill out the to and from date on both ee and b2b -->
    <actionGroup name="newCatalogPriceRuleByUI">
        <remove keyForRemoval="clickFromCalender"/>
        <remove keyForRemoval="clickFromToday"/>
        <remove keyForRemoval="clickToCalender"/>
        <remove keyForRemoval="clickToToday"/>
    </actionGroup>

    <!-- Creates a staging update for a catalog price rule -->
    <!-- Assumes that you are already on the catalog price rule page -->
    <actionGroup name="createCatalogRuleStagingUpdate">
        <arguments>
            <argument name="stagingUpdate" defaultValue="_defaultStaging"/>
            <argument name="endDate" defaultValue="" type="string"/>
            <argument name="status" defaultValue="Active" type="string"/>
        </arguments>
        <click stepKey="clickViewEdit" selector="{{AdminEntityStagingSection.nthViewEditButton('1')}}"/>

        <!-- Fill out the staging update details -->
        <fillField stepKey="fillName" selector="{{AdminStagingSlideOutSection.updateName}}" userInput="{{stagingUpdate.name}}"/>
        <fillField stepKey="fillDescription" selector="{{AdminStagingSlideOutSection.updateDescription}}" userInput="{{stagingUpdate.description}}"/>

        <!-- Check to see if it is close to the new minute. If so, wait a few seconds -->
        <executeJS stepKey="needWait" function="
                var today = new Date();
                var sec = today.getSeconds();
                return sec > 50 ? (61-sec) : 0;"/>
        <wait stepKey="conditionalWait" time="$needWait"/>

        <!-- Build the date in the correct format -->
        <generateDate stepKey="generateDate" date="+1 minute" format="m/d/Y g:i A"/>
        <executeJS stepKey="numSecondsLeft" function="
                var today = new Date();
                var sec = today.getSeconds();
                return 60 - sec;"/>
        <executeJS stepKey="getStartingTime" function="return Math.floor(new Date() / 1000);"/>
        <fillField stepKey="fillStartDate" selector="{{AdminStagingSlideOutSection.startDate}}" userInput="{$generateDate}"/>
        <fillField stepKey="fillEndDate" selector="{{AdminStagingSlideOutSection.endDate}}" userInput="{{endDate}}"/>

        <!-- Save the update details -->
        <selectOption stepKey="selectActive" selector="{{AdminCatalogPriceRuleStagingSection.status}}" userInput="{{status}}"/>
        <scrollToTopOfPage stepKey="scrollToTop"/>
        <click stepKey="clickSave" selector="{{AdminStagingSlideOutSection.save}}"/>

        <!-- Save the price rule -->
        <click stepKey="saveProduct" selector="{{AdminNewCatalogPriceRule.save}}"/>
        <seeElement stepKey="assertSuccess" selector="{{AdminProductMessagesSection.successMessage}}"/>

        <!-- Check to see if we have waited the require time yet. If not, wait the rest of the time -->
        <executeJS stepKey="getEndingTime" function="return Math.floor(new Date() / 1000);"/>
        <executeJS stepKey="getTimeToWait" function="
                var timePassed = {$getEndingTime} - {$getStartingTime};
                var timeLeft = {$numSecondsLeft} - timePassed;
                return timeLeft > 0 ? timeLeft : 0;"/>
        <wait stepKey="conditionalWait2" time="$getTimeToWait"/>

        <magentoCLI stepKey="runCron" command="cron:run --group='staging'"/>
        <magentoCLI stepKey="reindex" command="indexer:reindex"/>
        <magentoCLI stepKey="flushCache" command="cache:flush"/>
    </actionGroup>

    <actionGroup name="createCatalogRuleStagingUpdateWithItsStart">
        <arguments>
            <argument name="stagingUpdate" defaultValue="_defaultStaging"/>
        </arguments>
        <click selector="{{AdminEntityStagingSection.nthViewEditButton('1')}}" stepKey="clickViewEdit"/>
        <!-- Fill out the staging update details -->
        <fillField selector="{{AdminStagingSlideOutSection.updateName}}" userInput="{{stagingUpdate.name}}" stepKey="fillName"/>
        <fillField selector="{{AdminStagingSlideOutSection.updateDescription}}" userInput="{{stagingUpdate.description}}" stepKey="fillDescription"/>
        <generateDate date="+1 minute" format="m/d/Y g:i A" stepKey="startDateTime"/>
        <fillField selector="{{AdminStagingSlideOutSection.startDate}}" userInput="{$startDateTime}" stepKey="fillStartDate"/>
        <!-- Save the update details -->
        <selectOption selector="{{AdminCatalogPriceRuleStagingSection.status}}" userInput="Active" stepKey="selectStatus"/>
        <scrollToTopOfPage stepKey="scrollToTop"/>
        <click selector="{{AdminStagingSlideOutSection.save}}" stepKey="clickSave"/>
        <!-- Save the price rule -->
        <click selector="{{AdminNewCatalogPriceRule.save}}" stepKey="saveCatalogPriceRule"/>
        <seeElement selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSuccess"/>

        <wait time="60" stepKey="wait"/>
        <magentoCLI command="cron:run --group='staging'" stepKey="runCron"/>
        <magentoCLI command="cron:run --group='staging'" stepKey="runCron2"/>
        <magentoCLI command="indexer:reindex"  stepKey="reindex"/>
        <magentoCLI command="cache:flush" stepKey="flushCache"/>
    </actionGroup>

    <actionGroup name="CreateCatalogPriceRuleConditionWithAttribute">
        <remove keyForRemoval="clickFromCalender"/>
        <remove keyForRemoval="clickFromToday"/>
    </actionGroup>
</actionGroups>
