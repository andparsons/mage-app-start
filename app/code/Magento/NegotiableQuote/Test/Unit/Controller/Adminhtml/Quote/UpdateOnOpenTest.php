<?php

namespace Magento\NegotiableQuote\Test\Unit\Controller\Adminhtml\Quote;

use Magento\Framework\TestFramework\Unit\Helper\ObjectManager as ObjectManagerHelper;

/**
 * Class UpdateOnOpenTest.
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class UpdateOnOpenTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var ObjectManagerHelper
     */
    private $objectManagerHelper;

    /**
     * @var \Magento\NegotiableQuote\Controller\Adminhtml\Quote\UpdateOnOpen|\PHPUnit_Framework_MockObject_MockObject
     */
    private $updateOnOpen;

    /**
     * @var \Magento\Backend\App\Action\Context|\PHPUnit_Framework_MockObject_MockObject
     */
    private $contextMock;

    /**
     * @var \Magento\Framework\View\Result\PageFactory|\PHPUnit_Framework_MockObject_MockObject
     */
    private $resultPageFactoryMock;

    /**
     * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
     */
    private $loggerMock;

    /**
     * @var \Magento\Quote\Api\CartRepositoryInterface|\PHPUnit_Framework_MockObject_MockObject
     */
    private $quoteRepositoryMock;

    /**
     * @var \Magento\NegotiableQuote\Api\NegotiableQuoteManagementInterface|\PHPUnit_Framework_MockObject_MockObject
     */
    private $negotiableQuoteManagementMock;

    /**
     * @var \Magento\NegotiableQuote\Model\QuoteUpdater|\PHPUnit_Framework_MockObject_MockObject
     */
    private $quoteUpdaterMock;

    /**
     * @var \Magento\AdvancedCheckout\Model\CartFactory|\PHPUnit_Framework_MockObject_MockObject
     */
    private $cartFactoryMock;

    /**
     * @var \Magento\NegotiableQuote\Model\QuoteUpdatesInfo|\PHPUnit_Framework_MockObject_MockObject
     */
    private $quoteUpdatesInfoMock;

    /**
     * @var \Magento\NegotiableQuote\Model\Quote\Currency|\PHPUnit_Framework_MockObject_MockObject
     */
    private $quoteCurrencyMock;

    /**
     * @var \Magento\Framework\App\RequestInterface|\PHPUnit_Framework_MockObject_MockObject
     */
    private $request;

    /**
     * @var \Magento\Framework\Session\SessionManagerInterface|\PHPUnit_Framework_MockObject_MockObject
     */
    private $session;

    /**
     * @var \Magento\Framework\Controller\ResultFactory|\PHPUnit_Framework_MockObject_MockObject
     */
    private $resultFactory;

    /**
     * @var \Magento\NegotiableQuote\Helper\Quote|\PHPUnit_Framework_MockObject_MockObject
     */
    private $quoteHelper;

    /**
     * Set up.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->contextMock = $this->getMockBuilder(\Magento\Backend\App\Action\Context::class)
            ->disableOriginalConstructor()->getMock();

        $this->resultPageFactoryMock = $this->getMockBuilder(\Magento\Framework\View\Result\PageFactory::class)
            ->disableOriginalConstructor()->getMock();

        $this->loggerMock = $this->getMockBuilder(\Psr\Log\LoggerInterface::class)
            ->setMethods(['critical'])
            ->disableOriginalConstructor()->getMockForAbstractClass();

        $this->quoteRepositoryMock = $this->getMockBuilder(\Magento\Quote\Api\CartRepositoryInterface::class)
            ->setMethods(['get', 'save'])
            ->disableOriginalConstructor()->getMockForAbstractClass();

        $this->negotiableQuoteManagementMock = $this
            ->getMockBuilder(\Magento\NegotiableQuote\Api\NegotiableQuoteManagementInterface::class)
            ->setMethods(['openByMerchant'])
            ->disableOriginalConstructor()->getMockForAbstractClass();

        $this->quoteUpdaterMock = $this->getMockBuilder(\Magento\NegotiableQuote\Model\QuoteUpdater::class)
            ->setMethods(['getMessages'])
            ->disableOriginalConstructor()->getMock();

        $this->quoteHelper = $this->getMockBuilder(\Magento\NegotiableQuote\Helper\Quote::class)
            ->disableOriginalConstructor()->getMock();
        $this->cartFactoryMock = $this->getMockBuilder(\Magento\AdvancedCheckout\Model\CartFactory::class)
            ->setMethods(['create'])
            ->disableOriginalConstructor()->getMock();

        $this->quoteUpdatesInfoMock = $this->getMockBuilder(\Magento\NegotiableQuote\Model\QuoteUpdatesInfo::class)
            ->setMethods(['getQuoteUpdatedData', 'getMessages'])
            ->disableOriginalConstructor()->getMock();

        $this->quoteCurrencyMock = $this->getMockBuilder(\Magento\NegotiableQuote\Model\Quote\Currency::class)
            ->setMethods(['updateQuoteCurrency'])
            ->disableOriginalConstructor()
            ->getMock();

        $this->request = $this->getMockBuilder(\Magento\Framework\App\RequestInterface::class)
            ->setMethods(['getParam'])
            ->disableOriginalConstructor()->getMockForAbstractClass();

        $this->session = $this->getMockBuilder(\Magento\Framework\Session\SessionManagerInterface::class)
            ->disableOriginalConstructor()->getMockForAbstractClass();

        $this->resultFactory = $this->getMockBuilder(\Magento\Framework\Controller\ResultFactory::class)
            ->setMethods(['create'])
            ->disableOriginalConstructor()->getMock();

        $this->objectManagerHelper = new ObjectManagerHelper($this);
        $this->updateOnOpen = $this->objectManagerHelper->getObject(
            \Magento\NegotiableQuote\Controller\Adminhtml\Quote\UpdateOnOpen::class,
            [
                'context' => $this->contextMock,
                'resultPageFactory' => $this->resultPageFactoryMock,
                'logger' => $this->loggerMock,
                'quoteRepository' => $this->quoteRepositoryMock,
                'negotiableQuoteManagement' => $this->negotiableQuoteManagementMock,
                'quoteUpdater' => $this->quoteUpdaterMock,
                'cartFactory' => $this->cartFactoryMock,
                'quoteUpdatesInfo' => $this->quoteUpdatesInfoMock,
                'quoteCurrency' => $this->quoteCurrencyMock,
                'resultFactory' => $this->resultFactory,
                '_request' => $this->request,
                'quoteHelper' => $this->quoteHelper,
                '_session' => $this->session
            ]
        );
    }

    /**
     * Prepare Request Mock.
     *
     * @return void
     */
    private function prepareRequestMock()
    {
        $quoteId = 234;
        $this->request->expects($this->at(0))->method('getParam')->with('quote_id')->willReturn($quoteId);
        $quoteData = [];
        $this->request->expects($this->at(1))->method('getParam')->with('quote')->willReturn($quoteData);
    }

    /**
     * Retrieve Result Json mock.
     *
     * @return \Magento\Framework\Controller\Result\Raw|\PHPUnit_Framework_MockObject_MockObject
     */
    private function getResultJsonMock()
    {
        $result = $this->getMockBuilder(\Magento\Framework\Controller\Result\Raw::class)
            ->setMethods(['setJsonData'])
            ->disableOriginalConstructor()->getMock();
        $result->expects($this->exactly(1))->method('setJsonData')->willReturnSelf();

        $this->resultFactory->expects($this->exactly(1))->method('create')
            ->with(\Magento\Framework\Controller\ResultFactory::TYPE_JSON)->willReturn($result);

        return $result;
    }

    /**
     * Test execute() method.
     *
     * @return void
     */
    public function testExecute()
    {
        $this->prepareRequestMock();

        $negotiableQuote = $this->getMockBuilder(\Magento\NegotiableQuote\Api\Data\NegotiableQuoteInterface::class)
            ->setMethods([
                'getNegotiatedPriceValue',
                'setIsCustomerPriceChanged',
                'getIsCustomerPriceChanged',
                'getIsRegularQuote'
            ])
            ->disableOriginalConstructor()->getMockForAbstractClass();

        $oldIsPriceChanged = true;
        $negotiableQuote->expects($this->exactly(1))->method('getIsCustomerPriceChanged')
            ->willReturn($oldIsPriceChanged);

        $negQuotePriceValue = null;
        $negotiableQuote->expects($this->exactly(1))->method('getNegotiatedPriceValue')
            ->willReturn($negQuotePriceValue);

        $negotiableQuote->expects($this->exactly(1))->method('setIsCustomerPriceChanged')->willReturnSelf();

        $isRegularQuote = true;
        $negotiableQuote->expects($this->exactly(1))->method('getIsRegularQuote')->willReturn($isRegularQuote);

        $extensionAttributes = $this->getMockBuilder(\Magento\Quote\Api\Data\CartExtensionInterface::class)
            ->setMethods(['getNegotiableQuote'])
            ->disableOriginalConstructor()->getMockForAbstractClass();
        $extensionAttributes->expects($this->exactly(2))->method('getNegotiableQuote')->willReturn($negotiableQuote);

        $quote = $this->getMockBuilder(\Magento\Quote\Api\Data\CartInterface::class)
            ->setMethods(['getExtensionAttributes'])
            ->disableOriginalConstructor()->getMockForAbstractClass();
        $quote->expects($this->exactly(2))->method('getExtensionAttributes')->willReturn($extensionAttributes);

        $this->quoteHelper->expects($this->atLeastOnce())->method('resolveCurrentQuote')->willReturn($quote);
        $this->quoteRepositoryMock->expects($this->atLeastOnce())->method('get')->willReturn($quote);

        $this->quoteCurrencyMock->expects($this->exactly(1))->method('updateQuoteCurrency');

        $negQuoteOpenByMerchant = true;
        $this->negotiableQuoteManagementMock->expects($this->exactly(1))->method('openByMerchant')
            ->willReturn($negQuoteOpenByMerchant);

        $quoteUpdatedData = [];
        $this->quoteUpdatesInfoMock->expects($this->exactly(1))->method('getQuoteUpdatedData')
            ->willReturn($quoteUpdatedData);

        $quoteUpdatedMessages = [];
        $this->quoteUpdatesInfoMock->expects($this->exactly(1))->method('getMessages')
            ->willReturn($quoteUpdatedMessages);

        $cart = $this->getMockBuilder(\Magento\AdvancedCheckout\Model\Cart::class)
            ->setMethods(['setSession', 'getFailedItems'])
            ->disableOriginalConstructor()->getMock();
        $cart->expects($this->exactly(1))->method('setSession')->willReturnSelf();

        $cartFailedItems = [];
        $cart->expects($this->exactly(1))->method('getFailedItems')->willReturn($cartFailedItems);

        $this->cartFactoryMock->expects($this->exactly(1))->method('create')->willReturn($cart);

        $quoteMessages = [];
        $this->quoteUpdaterMock->expects($this->exactly(1))->method('getMessages')->willReturn($quoteMessages);

        $this->quoteRepositoryMock->expects($this->exactly(1))->method('save');

        $result = $this->getResultJsonMock();

        $this->assertEquals($result, $this->updateOnOpen->execute());
    }

    /**
     * Test execute() method with NoSuchEntity Exception.
     *
     * @return void
     */
    public function testExecuteWithNoSuchEntityException()
    {
        $this->prepareRequestMock();

        $exception = new \Magento\Framework\Exception\NoSuchEntityException();
        $this->quoteRepositoryMock->expects($this->exactly(1))->method('get')->willThrowException($exception);

        $result = $this->getResultJsonMock();

        $this->assertEquals($result, $this->updateOnOpen->execute());
    }

    /**
     * Test execute() method with Exception.
     *
     * @return void
     */
    public function testExecuteWithException()
    {
        $this->prepareRequestMock();

        $exception = new \Exception();
        $this->quoteRepositoryMock->expects($this->exactly(1))->method('get')->willThrowException($exception);

        $this->loggerMock->expects($this->exactly(1))->method('critical')->willReturn(null);

        $result = $this->getResultJsonMock();

        $this->assertEquals($result, $this->updateOnOpen->execute());
    }
}
